// N: 1-10만
// K: 1-10만 -1(n사이값)
// 온도는 -100 ~ 100
// 연속된 온도의 합이 최대가 되는 값 구하기 : 구간합 prefix sum, psum[i] = psum[i-1] + a[i];
// 누적합, 구간합 : https://jih3508.tistory.com/50
// 최대값 구하는 문제 : 최솟값부터 -> 최대값 
// 이 문제 최솟값은? -100 * (10만번) => -1000만

#include<bits/stdc++.h> 
using namespace std;  
typedef long long ll;  
int n, k, temp, psum[100001], ret = -1000004; 
int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);cout.tie(NULL);
	cin >> n >> k; 
	for(int i = 1; i <= n; i++){
		cin >> temp; psum[i] = psum[i - 1] + temp; 
	} 
	for(int i = k; i <= n; i++){
		ret = max(ret, psum[i] - psum[i - k]);
	}
	cout << ret << "\n";
    return 0;
}

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    private void solution() throws Exception {
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken()); //날짜수
        int K = Integer.parseInt(st.nextToken()); //연속적인 날짜 수

        st = new StringTokenizer(br.readLine());
        int[] arr = new int[N+1]; // 온도 저장
        int max = -1000004;
        for (int i = 1; i <= N; i++) arr[i] = arr[i-1]+Integer.parseInt(st.nextToken());
        for (int i = K; i <= N; i++) {
            int rangeSum = arr[i]-arr[i-K];
            if (max < rangeSum) max = rangeSum;
        }
        System.out.println(max);
    }
    
    public static void main(String[] args) throws Exception {
        new Main().solution();
    }        
 }      
